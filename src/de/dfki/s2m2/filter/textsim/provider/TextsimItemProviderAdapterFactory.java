/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package de.dfki.s2m2.filter.textsim.provider;

import de.dfki.s2m2.filter.And;
import de.dfki.s2m2.filter.Average;
import de.dfki.s2m2.filter.BipartiteGraphMatching;
import de.dfki.s2m2.filter.BooleanAsDouble;
import de.dfki.s2m2.filter.Concatenation;
import de.dfki.s2m2.filter.Conditional;
import de.dfki.s2m2.filter.EntityExtraction;
import de.dfki.s2m2.filter.FilterConfiguration;
import de.dfki.s2m2.filter.FilterPackage;
import de.dfki.s2m2.filter.ForallExists;
import de.dfki.s2m2.filter.GreaterEquals;
import de.dfki.s2m2.filter.Inverse;
import de.dfki.s2m2.filter.Maximum;
import de.dfki.s2m2.filter.Negation;
import de.dfki.s2m2.filter.Or;

import de.dfki.s2m2.filter.textsim.TextsimFactory;
import de.dfki.s2m2.filter.textsim.TextsimPackage;

import de.dfki.s2m2.filter.textsim.util.TextsimAdapterFactory;

import de.dfki.s2m2.filter.util.FilterSwitch;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.edit.command.CommandParameter;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TextsimItemProviderAdapterFactory extends TextsimAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(S2m2_textsimEditPlugin.INSTANCE, TextsimPackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TextsimItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.textsim.LossOfInformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LossOfInformationItemProvider lossOfInformationItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.textsim.LossOfInformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLossOfInformationAdapter() {
		if (lossOfInformationItemProvider == null) {
			lossOfInformationItemProvider = new LossOfInformationItemProvider(this);
		}

		return lossOfInformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.textsim.Cosine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CosineItemProvider cosineItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.textsim.Cosine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCosineAdapter() {
		if (cosineItemProvider == null) {
			cosineItemProvider = new CosineItemProvider(this);
		}

		return cosineItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders() {
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceLocator getResourceLocator() {
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (lossOfInformationItemProvider != null) lossOfInformationItemProvider.dispose();
		if (cosineItemProvider != null) cosineItemProvider.dispose();
	}

	/**
	 * A child creation extender for the {@link FilterPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class FilterChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends FilterSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseFilterConfiguration(FilterConfiguration object) {
				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.FILTER_CONFIGURATION__FILTER,
						 TextsimFactory.eINSTANCE.createLossOfInformation()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.FILTER_CONFIGURATION__FILTER,
						 TextsimFactory.eINSTANCE.createCosine()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <Domain> Object caseAverage(Average<Domain> object) {
				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.AVERAGE__OPERANDS,
						 TextsimFactory.eINSTANCE.createLossOfInformation()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.AVERAGE__OPERANDS,
						 TextsimFactory.eINSTANCE.createCosine()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <Domain, Range> Object caseInverse(Inverse<Domain, Range> object) {
				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.INVERSE__OPERAND,
						 TextsimFactory.eINSTANCE.createLossOfInformation()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.INVERSE__OPERAND,
						 TextsimFactory.eINSTANCE.createCosine()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <Domain> Object caseAnd(And<Domain> object) {
				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.AND__OPERANDS,
						 TextsimFactory.eINSTANCE.createLossOfInformation()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.AND__OPERANDS,
						 TextsimFactory.eINSTANCE.createCosine()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <Domain> Object caseOr(Or<Domain> object) {
				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.OR__OPERANDS,
						 TextsimFactory.eINSTANCE.createLossOfInformation()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.OR__OPERANDS,
						 TextsimFactory.eINSTANCE.createCosine()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <Domain> Object caseGreaterEquals(GreaterEquals<Domain> object) {
				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.GREATER_EQUALS__LEFT_OPERAND,
						 TextsimFactory.eINSTANCE.createLossOfInformation()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.GREATER_EQUALS__LEFT_OPERAND,
						 TextsimFactory.eINSTANCE.createCosine()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.GREATER_EQUALS__RIGHT_OPERAND,
						 TextsimFactory.eINSTANCE.createLossOfInformation()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.GREATER_EQUALS__RIGHT_OPERAND,
						 TextsimFactory.eINSTANCE.createCosine()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <Domain> Object caseForallExists(ForallExists<Domain> object) {
				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.FORALL_EXISTS__OPERAND,
						 TextsimFactory.eINSTANCE.createLossOfInformation()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.FORALL_EXISTS__OPERAND,
						 TextsimFactory.eINSTANCE.createCosine()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <Domain, Range> Object caseConditional(Conditional<Domain, Range> object) {
				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.CONDITIONAL__IF,
						 TextsimFactory.eINSTANCE.createLossOfInformation()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.CONDITIONAL__IF,
						 TextsimFactory.eINSTANCE.createCosine()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.CONDITIONAL__THEN,
						 TextsimFactory.eINSTANCE.createLossOfInformation()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.CONDITIONAL__THEN,
						 TextsimFactory.eINSTANCE.createCosine()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.CONDITIONAL__ELSE,
						 TextsimFactory.eINSTANCE.createLossOfInformation()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.CONDITIONAL__ELSE,
						 TextsimFactory.eINSTANCE.createCosine()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <Focus, Domain, Range> Object caseEntityExtraction(EntityExtraction<Focus, Domain, Range> object) {
				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.ENTITY_EXTRACTION__OPERAND,
						 TextsimFactory.eINSTANCE.createLossOfInformation()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.ENTITY_EXTRACTION__OPERAND,
						 TextsimFactory.eINSTANCE.createCosine()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <Domain> Object caseNegation(Negation<Domain> object) {
				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.NEGATION__OPERAND,
						 TextsimFactory.eINSTANCE.createLossOfInformation()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.NEGATION__OPERAND,
						 TextsimFactory.eINSTANCE.createCosine()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <Domain> Object caseMaximum(Maximum<Domain> object) {
				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.MAXIMUM__OPERANDS,
						 TextsimFactory.eINSTANCE.createLossOfInformation()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.MAXIMUM__OPERANDS,
						 TextsimFactory.eINSTANCE.createCosine()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <Range> Object caseConcatenation(Concatenation<Range> object) {
				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.CONCATENATION__OPERAND,
						 TextsimFactory.eINSTANCE.createLossOfInformation()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.CONCATENATION__OPERAND,
						 TextsimFactory.eINSTANCE.createCosine()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <Domain> Object caseBooleanAsDouble(BooleanAsDouble<Domain> object) {
				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.BOOLEAN_AS_DOUBLE__OPERAND,
						 TextsimFactory.eINSTANCE.createLossOfInformation()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.BOOLEAN_AS_DOUBLE__OPERAND,
						 TextsimFactory.eINSTANCE.createCosine()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public <Domain> Object caseBipartiteGraphMatching(BipartiteGraphMatching<Domain> object) {
				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.BIPARTITE_GRAPH_MATCHING__VALUATION,
						 TextsimFactory.eINSTANCE.createLossOfInformation()));

				newChildDescriptors.add
					(createChildParameter
						(FilterPackage.Literals.BIPARTITE_GRAPH_MATCHING__VALUATION,
						 TextsimFactory.eINSTANCE.createCosine()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
		   new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
		   return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return S2m2_textsimEditPlugin.INSTANCE;
		}
	}

}
