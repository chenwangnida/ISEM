/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package de.dfki.s2m2.filter.provider;

import de.dfki.s2m2.filter.FilterPackage;

import de.dfki.s2m2.filter.util.FilterAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FilterItemProviderAdapterFactory extends FilterAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(S2m2_filterEditPlugin.INSTANCE, FilterPackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FilterItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.FilterConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilterConfigurationItemProvider filterConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.FilterConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilterConfigurationAdapter() {
		if (filterConfigurationItemProvider == null) {
			filterConfigurationItemProvider = new FilterConfigurationItemProvider(this);
		}

		return filterConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.FixedValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FixedValueItemProvider fixedValueItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.FixedValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFixedValueAdapter() {
		if (fixedValueItemProvider == null) {
			fixedValueItemProvider = new FixedValueItemProvider(this);
		}

		return fixedValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.Average} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AverageItemProvider averageItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.Average}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAverageAdapter() {
		if (averageItemProvider == null) {
			averageItemProvider = new AverageItemProvider(this);
		}

		return averageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.Inverse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InverseItemProvider inverseItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.Inverse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInverseAdapter() {
		if (inverseItemProvider == null) {
			inverseItemProvider = new InverseItemProvider(this);
		}

		return inverseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.And} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndItemProvider andItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.And}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndAdapter() {
		if (andItemProvider == null) {
			andItemProvider = new AndItemProvider(this);
		}

		return andItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.Or} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrItemProvider orItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.Or}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrAdapter() {
		if (orItemProvider == null) {
			orItemProvider = new OrItemProvider(this);
		}

		return orItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.GreaterEquals} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GreaterEqualsItemProvider greaterEqualsItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.GreaterEquals}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGreaterEqualsAdapter() {
		if (greaterEqualsItemProvider == null) {
			greaterEqualsItemProvider = new GreaterEqualsItemProvider(this);
		}

		return greaterEqualsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.ForallExists} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForallExistsItemProvider forallExistsItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.ForallExists}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForallExistsAdapter() {
		if (forallExistsItemProvider == null) {
			forallExistsItemProvider = new ForallExistsItemProvider(this);
		}

		return forallExistsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.Conditional} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalItemProvider conditionalItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.Conditional}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalAdapter() {
		if (conditionalItemProvider == null) {
			conditionalItemProvider = new ConditionalItemProvider(this);
		}

		return conditionalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.SemanticAnnotationEvaluation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SemanticAnnotationEvaluationItemProvider semanticAnnotationEvaluationItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.SemanticAnnotationEvaluation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSemanticAnnotationEvaluationAdapter() {
		if (semanticAnnotationEvaluationItemProvider == null) {
			semanticAnnotationEvaluationItemProvider = new SemanticAnnotationEvaluationItemProvider(this);
		}

		return semanticAnnotationEvaluationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.ServiceLiteralEvaluation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceLiteralEvaluationItemProvider serviceLiteralEvaluationItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.ServiceLiteralEvaluation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceLiteralEvaluationAdapter() {
		if (serviceLiteralEvaluationItemProvider == null) {
			serviceLiteralEvaluationItemProvider = new ServiceLiteralEvaluationItemProvider(this);
		}

		return serviceLiteralEvaluationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.Negation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NegationItemProvider negationItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.Negation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNegationAdapter() {
		if (negationItemProvider == null) {
			negationItemProvider = new NegationItemProvider(this);
		}

		return negationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.Maximum} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaximumItemProvider maximumItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.Maximum}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaximumAdapter() {
		if (maximumItemProvider == null) {
			maximumItemProvider = new MaximumItemProvider(this);
		}

		return maximumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.True} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrueItemProvider trueItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.True}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrueAdapter() {
		if (trueItemProvider == null) {
			trueItemProvider = new TrueItemProvider(this);
		}

		return trueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.Concatenation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConcatenationItemProvider concatenationItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.Concatenation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConcatenationAdapter() {
		if (concatenationItemProvider == null) {
			concatenationItemProvider = new ConcatenationItemProvider(this);
		}

		return concatenationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.BooleanAsDouble} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanAsDoubleItemProvider booleanAsDoubleItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.BooleanAsDouble}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanAsDoubleAdapter() {
		if (booleanAsDoubleItemProvider == null) {
			booleanAsDoubleItemProvider = new BooleanAsDoubleItemProvider(this);
		}

		return booleanAsDoubleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.SpecificationAvailable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecificationAvailableItemProvider specificationAvailableItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.SpecificationAvailable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpecificationAvailableAdapter() {
		if (specificationAvailableItemProvider == null) {
			specificationAvailableItemProvider = new SpecificationAvailableItemProvider(this);
		}

		return specificationAvailableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.SpecificationEvaluation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecificationEvaluationItemProvider specificationEvaluationItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.SpecificationEvaluation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpecificationEvaluationAdapter() {
		if (specificationEvaluationItemProvider == null) {
			specificationEvaluationItemProvider = new SpecificationEvaluationItemProvider(this);
		}

		return specificationEvaluationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dfki.s2m2.filter.BipartiteGraphMatching} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BipartiteGraphMatchingItemProvider bipartiteGraphMatchingItemProvider;

	/**
	 * This creates an adapter for a {@link de.dfki.s2m2.filter.BipartiteGraphMatching}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBipartiteGraphMatchingAdapter() {
		if (bipartiteGraphMatchingItemProvider == null) {
			bipartiteGraphMatchingItemProvider = new BipartiteGraphMatchingItemProvider(this);
		}

		return bipartiteGraphMatchingItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders() {
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceLocator getResourceLocator() {
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (filterConfigurationItemProvider != null) filterConfigurationItemProvider.dispose();
		if (fixedValueItemProvider != null) fixedValueItemProvider.dispose();
		if (averageItemProvider != null) averageItemProvider.dispose();
		if (inverseItemProvider != null) inverseItemProvider.dispose();
		if (andItemProvider != null) andItemProvider.dispose();
		if (orItemProvider != null) orItemProvider.dispose();
		if (greaterEqualsItemProvider != null) greaterEqualsItemProvider.dispose();
		if (forallExistsItemProvider != null) forallExistsItemProvider.dispose();
		if (conditionalItemProvider != null) conditionalItemProvider.dispose();
		if (semanticAnnotationEvaluationItemProvider != null) semanticAnnotationEvaluationItemProvider.dispose();
		if (serviceLiteralEvaluationItemProvider != null) serviceLiteralEvaluationItemProvider.dispose();
		if (negationItemProvider != null) negationItemProvider.dispose();
		if (maximumItemProvider != null) maximumItemProvider.dispose();
		if (trueItemProvider != null) trueItemProvider.dispose();
		if (concatenationItemProvider != null) concatenationItemProvider.dispose();
		if (booleanAsDoubleItemProvider != null) booleanAsDoubleItemProvider.dispose();
		if (specificationAvailableItemProvider != null) specificationAvailableItemProvider.dispose();
		if (specificationEvaluationItemProvider != null) specificationEvaluationItemProvider.dispose();
		if (bipartiteGraphMatchingItemProvider != null) bipartiteGraphMatchingItemProvider.dispose();
	}

}
